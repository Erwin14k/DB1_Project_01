const oracledb = require('oracledb');
const { oracle } = require('./config/config');
// Database User
const user = oracle.user;
// Database Password
const password = oracle.password;
// Database ConnectString
const connectString = oracle.connectString;

async function fillModel() {
    let conn;
    try {
        conn = await oracledb.getConnection({
        user: user,
        password: password,
        connectString: connectString
        });

        // Creating HOSPITAL table
        await conn.execute(`CREATE TABLE HOSPITAL (
            HOSPITAL_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            HOSPITAL_NAME VARCHAR2(100) NOT NULL,
            HOSPITAL_DIRECTION VARCHAR2(200) NOT NULL
            )`
        );

        // Creating VICTIM table
        await conn.execute(`CREATE TABLE VICTIM (
            VICTIM_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
            VICTIM_NAME VARCHAR2(50) NOT NULL,
            VICTIM_LAST_NAME VARCHAR2(50) NOT NULL,
            VICTIM_DIRECTION VARCHAR2(100) NOT NULL,
            VICTIM_STATUS VARCHAR2(20) NOT NULL,
            FIRST_SUSPICION_DATE DATE NOT NULL,
            CONFIRMATION_DATE DATE NOT NULL,
            DEATH_DATE DATE,
            HOSPITAL_ID NUMBER,
            CONSTRAINT FK_HOSPITAL
                FOREIGN KEY (HOSPITAL_ID)
                REFERENCES HOSPITAL(HOSPITAL_ID)
            )`
        );

        // Creating ASSOCIATED table
        await conn.execute(`CREATE TABLE ASSOCIATED (
            ASSOCIATED_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            ASSOCIATED_NAME VARCHAR2(100) NOT NULL,
            ASSOCIATED_LAST_NAME VARCHAR2(100) NOT NULL
            )`
        );

        // Creating CONTACT table
        await conn.execute(`CREATE TABLE CONTACT (
            CONTACT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            VICTIM_ID NUMBER NOT NULL,
            ASSOCIATED_ID NUMBER NOT NULL,
            DATE_MET DATE NOT NULL,
            PHYSICAL_CONTACT VARCHAR2(100) NOT NULL,
            START_CONTACT_DATE DATE NOT NULL,
            END_CONTACT_DATE DATE NOT NULL,
            CONSTRAINT FK_VICTIM FOREIGN KEY (VICTIM_ID) REFERENCES VICTIM(VICTIM_ID),
            CONSTRAINT FK_ASSOCIATED FOREIGN KEY (ASSOCIATED_ID) REFERENCES ASSOCIATED(ASSOCIATED_ID)
            )`
        );

        // Creating TREATMENT table
        await conn.execute(`CREATE TABLE TREATMENT (
            TREATMENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            TREATMENT_NAME VARCHAR2(100) NOT NULL,
            EFECTIVITY NUMBER NOT NULL
            )`
        );

        // Creating TREATMENT_VICTIM table
        await conn.execute(`CREATE TABLE TREATMENT_VICTIM (
            TREATMENT_VICTIM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            TREATMENT_ID NUMBER NOT NULL,
            VICTIM_ID NUMBER NOT NULL,
            START_TREATMENT_DATE DATE NOT NULL,
            END_TREATMENT_DATE DATE NOT NULL,
            VICTIM_EFECTIVITY INT NOT NULL,
            CONSTRAINT FK_TREATMENT FOREIGN KEY (TREATMENT_ID) REFERENCES TREATMENT(TREATMENT_ID),
            CONSTRAINT FK_VICTIM2 FOREIGN KEY (VICTIM_ID) REFERENCES VICTIM(VICTIM_ID)
            )`
        );

        // Creating LOCATION table
        await conn.execute(`CREATE TABLE LOCATION (
            LOCATION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            VICTIM_LOCATION VARCHAR2(200) NOT NULL,
            ARRIVAL_DATE DATE NOT NULL,
            LEFT_DATE DATE NOT NULL,
            HOSPITAL_ID NUMBER ,
            VICTIM_ID NUMBER NOT NULL,
            CONSTRAINT FK_HOSPITAL_LOC FOREIGN KEY (HOSPITAL_ID) REFERENCES HOSPITAL(HOSPITAL_ID),
            CONSTRAINT FK_VICTIM_LOC FOREIGN KEY (VICTIM_ID) REFERENCES VICTIM(VICTIM_ID)
            )`
        );

        // Fill HOSPITAL Table
        await conn.execute(`INSERT INTO HOSPITAL (HOSPITAL_NAME, HOSPITAL_DIRECTION)
            SELECT DISTINCT HOSPITAL_NAME, HOSPITAL_DIRECTION
            FROM TEMPORAL
            WHERE HOSPITAL_NAME IS NOT NULL AND HOSPITAL_DIRECTION IS NOT NULL AND NOT EXISTS (
                SELECT 1 FROM HOSPITAL WHERE 
                HOSPITAL.HOSPITAL_NAME = TEMPORAL.HOSPITAL_NAME AND HOSPITAL.HOSPITAL_DIRECTION=TEMPORAL.HOSPITAL_DIRECTION
                )`
        );

        // Fill VICTIM Table
        await conn.execute(`
            INSERT INTO VICTIM (
                VICTIM_NAME, VICTIM_LAST_NAME, VICTIM_DIRECTION, VICTIM_STATUS, FIRST_SUSPICION_DATE,
                CONFIRMATION_DATE, DEATH_DATE, HOSPITAL_ID
            )
            SELECT DISTINCT
                TEMPORAL.VICTIM_NAME, TEMPORAL.VICTIM_LAST_NAME, TEMPORAL.VICTIM_DIRECTION, TEMPORAL.VICTIM_STATUS,
                TO_DATE(TEMPORAL.FIRST_SUSPICION_DATE, 'DD/MM/YYYY HH24:MI'), 
                TO_DATE(TEMPORAL.CONFIRMATION_DATE, 'DD/MM/YYYY HH24:MI'), 
                CASE 
                    WHEN TEMPORAL.DEATH_DATE IS NULL THEN NULL 
                    ELSE TO_DATE(TEMPORAL.DEATH_DATE, 'DD/MM/YYYY HH24:MI') 
                END,
                h.HOSPITAL_ID
                FROM 
                TEMPORAL LEFT JOIN HOSPITAL h ON TEMPORAL.HOSPITAL_NAME = h.HOSPITAL_NAME AND TEMPORAL.HOSPITAL_DIRECTION = h.HOSPITAL_DIRECTION
                WHERE 
                    TEMPORAL.VICTIM_NAME IS NOT NULL AND TEMPORAL.VICTIM_LAST_NAME IS NOT NULL AND NOT EXISTS (
                        SELECT 1 FROM VICTIM 
                        WHERE 
                            VICTIM.VICTIM_NAME = TEMPORAL.VICTIM_NAME 
                            AND VICTIM.VICTIM_LAST_NAME = TEMPORAL.VICTIM_LAST_NAME 
                            AND VICTIM.VICTIM_DIRECTION = TEMPORAL.VICTIM_DIRECTION 
                )`
        );
        
        // Fill Assocaited Table
        await conn.execute(`INSERT INTO ASSOCIATED  (ASSOCIATED_NAME, ASSOCIATED_LAST_NAME)
            SELECT DISTINCT ASSOCIATED_NAME, ASSOCIATED_LAST_NAME
            FROM TEMPORAL
            WHERE ASSOCIATED_NAME IS NOT NULL AND ASSOCIATED_LAST_NAME IS NOT NULL AND NOT EXISTS (
                SELECT 1 FROM ASSOCIATED WHERE 
                ASSOCIATED.ASSOCIATED_NAME = TEMPORAL.ASSOCIATED_NAME AND ASSOCIATED.ASSOCIATED_LAST_NAME=TEMPORAL.ASSOCIATED_LAST_NAME
            )`
        );

        // Fill TREATMENT Table
        await conn.execute(`INSERT INTO TREATMENT  (TREATMENT_NAME, EFECTIVITY)
            SELECT DISTINCT TREATMENT_NAME, EFECTIVITY
            FROM TEMPORAL
            WHERE TREATMENT_NAME  IS NOT NULL AND EFECTIVITY IS NOT NULL AND NOT EXISTS (
                SELECT 1 FROM TREATMENT WHERE 
                TREATMENT.TREATMENT_NAME = TEMPORAL.TREATMENT_NAME)  `
        );

        // Fill CONTACT Table
        await conn.execute(`INSERT INTO CONTACT(VICTIM_ID, ASSOCIATED_ID, DATE_MET, PHYSICAL_CONTACT, START_CONTACT_DATE, END_CONTACT_DATE)
            SELECT DISTINCT v.VICTIM_ID, a.ASSOCIATED_ID, TO_DATE(TEMPORAL.DATE_MET, 'DD/MM/YYYY HH24:MI'), TEMPORAL.PHYSICAL_CONTACT,
                TO_DATE(TEMPORAL.START_CONTACT_DATE, 'DD/MM/YYYY HH24:MI'), TO_DATE(TEMPORAL.END_CONTACT_DATE, 'DD/MM/YYYY HH24:MI')
            FROM TEMPORAL 
            LEFT JOIN VICTIM v ON TEMPORAL.VICTIM_NAME = v.VICTIM_NAME AND TEMPORAL.VICTIM_LAST_NAME = v.VICTIM_LAST_NAME 
            LEFT JOIN ASSOCIATED a ON TEMPORAL.ASSOCIATED_NAME = a.ASSOCIATED_NAME AND TEMPORAL.ASSOCIATED_LAST_NAME = a.ASSOCIATED_LAST_NAME 
            WHERE 
                TEMPORAL.VICTIM_NAME IS NOT NULL AND 
                TEMPORAL.VICTIM_LAST_NAME IS NOT NULL AND 
                TEMPORAL.ASSOCIATED_NAME IS NOT NULL AND 
                TEMPORAL.ASSOCIATED_LAST_NAME IS NOT NULL AND 
                TEMPORAL.DATE_MET IS NOT NULL AND 
                TEMPORAL.PHYSICAL_CONTACT IS NOT NULL AND 
                TEMPORAL.START_CONTACT_DATE IS NOT NULL AND 
                TEMPORAL.END_CONTACT_DATE IS NOT NULL AND
            NOT EXISTS (
                SELECT 1
                FROM CONTACT c
                WHERE c.VICTIM_ID = v.VICTIM_ID AND c.ASSOCIATED_ID = a.ASSOCIATED_ID  AND c.PHYSICAL_CONTACT = TEMPORAL.PHYSICAL_CONTACT
            )`
        );

        // Fill TREATMENT_VICTIM Table
        await conn.execute(`INSERT INTO TREATMENT_VICTIM (TREATMENT_ID, VICTIM_ID,START_TREATMENT_DATE,END_TREATMENT_DATE,VICTIM_EFECTIVITY)
            SELECT DISTINCT t.TREATMENT_ID, v.VICTIM_ID, TO_DATE(TEMPORAL.START_TREATMENT_DATE, 'DD/MM/YYYY HH24:MI'),
                TO_DATE(TEMPORAL.END_TREATMENT_DATE, 'DD/MM/YYYY HH24:MI'),TEMPORAL.VICTIM_EFECTIVITY
            FROM TEMPORAL 
            LEFT JOIN VICTIM v ON TEMPORAL.VICTIM_NAME = v.VICTIM_NAME AND TEMPORAL.VICTIM_LAST_NAME = v.VICTIM_LAST_NAME 
            LEFT JOIN TREATMENT t ON TEMPORAL.TREATMENT_NAME  = t.TREATMENT_NAME 
            WHERE 
                TEMPORAL.VICTIM_NAME IS NOT NULL AND 
                TEMPORAL.VICTIM_LAST_NAME IS NOT NULL AND 
                TEMPORAL.TREATMENT_NAME IS NOT NULL AND 
                TEMPORAL.START_TREATMENT_DATE IS NOT NULL AND 
                TEMPORAL.END_TREATMENT_DATE IS NOT NULL AND 
                TEMPORAL.VICTIM_EFECTIVITY IS NOT NULL  AND
                NOT EXISTS (
                    SELECT 1
                    FROM TREATMENT_VICTIM tv
                    WHERE tv.VICTIM_ID = v.VICTIM_ID AND tv.TREATMENT_ID = t.TREATMENT_ID  AND TEMPORAL.VICTIM_EFECTIVITY  = tv.VICTIM_EFECTIVITY
                    AND TO_DATE(TEMPORAL.START_TREATMENT_DATE, 'DD/MM/YYYY HH24:MI') = tv.START_TREATMENT_DATE AND TO_DATE(TEMPORAL.END_TREATMENT_DATE , 'DD/MM/YYYY HH24:MI')  = tv.END_TREATMENT_DATE
                )`
        );

        // Fill LOCATION Table
        await conn.execute(`INSERT INTO LOCATION (VICTIM_LOCATION, ARRIVAL_DATE,LEFT_DATE,HOSPITAL_ID,VICTIM_ID)
            SELECT DISTINCT TEMPORAL.VICTIM_LOCATION , TO_DATE(TEMPORAL.ARRIVAL_DATE, 'DD/MM/YYYY HH24:MI'),
                TO_DATE(TEMPORAL.LEFT_DATE, 'DD/MM/YYYY HH24:MI'),v.HOSPITAL_ID,v.VICTIM_ID
            FROM TEMPORAL 
            LEFT JOIN VICTIM v ON TEMPORAL.VICTIM_NAME = v.VICTIM_NAME AND TEMPORAL.VICTIM_LAST_NAME = v.VICTIM_LAST_NAME 
            WHERE 
                TEMPORAL.VICTIM_NAME IS NOT NULL AND 
                TEMPORAL.VICTIM_LAST_NAME IS NOT NULL AND 
                TEMPORAL.VICTIM_LOCATION IS NOT NULL AND 
                TEMPORAL.ARRIVAL_DATE IS NOT NULL AND 
                TEMPORAL.LEFT_DATE IS NOT NULL AND 
            NOT EXISTS (
                SELECT 1
                FROM LOCATION l
                WHERE l.VICTIM_ID = v.VICTIM_ID AND l.HOSPITAL_ID = v.HOSPITAL_ID  AND TEMPORAL.VICTIM_LOCATION  = l.VICTIM_LOCATION 
            )`
        );

        // Commit to database
        await conn.commit();
        console.log('Model Tables Created Successfully!');

    } catch (err) {
        console.error('Error Creating Model Tables:', err);
    } finally {
        if (conn) {
        try {
            await conn.close();
        }catch (err) {
            console.error(err);
        }
        }
    }
}

module.exports = fillModel;